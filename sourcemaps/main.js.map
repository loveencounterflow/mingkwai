{"version":3,"sources":["main.coffee"],"names":[],"mappings":"AAOA;AAAA,MAAA;;EAAA,QAAA,GAA4B,OAAA,CAAQ,MAAR;;EAG5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAE5B,IAAC,CAAA,cAAD,GAA4B,OAAA,CAAQ,kBAAR;;;AAG5B;;;AACA;;EACA,MAAM,CAAC,EAAP,GAA4B;;EAC5B,MAAM,CAAC,EAAE,CAAC,EAAV,GAA4B,OAAA,CAAQ,qBAAR;;EAOzB,CAAA,SAAA;;AACD;;;;;AAAA,QAAA;IAIA,WAAA,GAAwB,QAAQ,CAAC,OAAT,CAAiB,SAAjB,EAA4B,iBAA5B;IACxB,qBAAA,GAAwB,EAAE,CAAC,cAAc,CAAC,yBAAlB,CAA4C,WAA5C;IACxB,EAAE,CAAC,EAAE,CAAC,OAAN,GAAwB;AAExB,SAAA,qCAAA;;MACE,WAAA,GAAgB,WAAa,CAAA,MAAA;MAC7B,MAAA,GAAgB,OAAA,CAAQ,YAAR;MAChB,EAAE,CAAC,EAAE,CAAC,OAAO,CAAC,IAAd,CAAmB,MAAnB;AAHF;AAKA,WAAO;EAdN,CAAA,CAAH,CAAA;AA7BA","file":"main.js","sourceRoot":"/source/","sourcesContent":["\n\n\n\n\n\n############################################################################################################\nnjs_path                  = require 'path'\n# njs_fs                    = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MK/main'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n@PLUGIN_MANAGER           = require './plugin-manager'\n# D                         = require 'pipedreams'\n#...........................................................................................................\n### Registering global `MK` that represents this app rack. ###\n### NB we could do this using `Symbol.for 'MK'` to obtain better namespace separation ###\nglobal.MK                 = @\nglobal.MK.TS              = require 'mingkwai-typesetter'\n\n\n\n#===========================================================================================================\n# REGISTER PLUGINS (PRE-ALPHA)\n#-----------------------------------------------------------------------------------------------------------\ndo ->\n  ### To get started with plugins handling, we'll assume that all plugins are installed (or linked) in the\n  MINGKWAI(rack) `node_modules` folder, and that all plugins are to be inserted after the producing\n  end of the MD read stream and before the consuming end of the TeX write stream. At this point there will\n  be no particular ordering between plugins. ###\n  plugin_home           = njs_path.resolve __dirname, '../node_modules'\n  plugin_info_by_routes = MK.PLUGIN_MANAGER.find_plugin_package_infos plugin_home\n  MK.TS.plugins         = []\n  #.........................................................................................................\n  for plugin_route, plugin_info of plugin_info_by_routes\n    plugin_name   = plugin_info[ 'name' ]\n    plugin        = require plugin_route\n    MK.TS.plugins.push plugin\n  #.........................................................................................................\n  return null\n\n\n\n\n"]}